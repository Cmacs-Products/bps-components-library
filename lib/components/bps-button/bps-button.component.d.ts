import { ContentObserver } from '@angular/cdk/observers';
import { AfterContentInit, ChangeDetectorRef, ElementRef, NgZone, OnChanges, OnDestroy, OnInit, QueryList, Renderer2, SimpleChanges, EventEmitter } from '@angular/core';
import { NzWaveConfig } from 'ng-zorro-antd/core/wave';
import { NzConfigService } from '../bps-tree/tree/config.service';
import { NzUpdateHostClassService } from '../core/services/update-host-class.service';
import { NzSizeLDSType } from '../core/types';
import * as i0 from "@angular/core";
export type NzButtonType = 'primary' | 'dashed' | 'danger' | 'default' | 'link' | 'variation-1' | 'variation-2' | 'variation-3' | 'variation-4' | 'variation-5' | 'variation-6' | 'variation-7' | 'variation-8' | 'variation-9' | 'variation-10' | 'variation-11' | 'variation-12' | 'variation-13' | 'variation-14' | 'variation-15' | 'variation-16' | 'variation-17' | 'variation-18' | 'variation-19' | 'variation-20' | 'editable';
export type NzButtonShape = 'circle' | 'round' | null;
export declare class BpsButtonComponent implements AfterContentInit, OnInit, OnDestroy, OnChanges {
    private elementRef;
    private cdr;
    private renderer;
    private contentObserver;
    private nzUpdateHostClassService;
    private ngZone;
    nzConfigService: NzConfigService;
    private waveConfig;
    private animationType;
    isSelected: boolean;
    isSelectedChange: EventEmitter<any>;
    showEditionMode: boolean;
    contentElement: ElementRef;
    listOfIconElement: QueryList<ElementRef>;
    bpsBlock: boolean;
    bpsGhost: boolean;
    bpsSearch: boolean;
    bpsComputed: boolean;
    bpsLoading: boolean;
    bpsEditionEnabled: boolean;
    bpsType: NzButtonType;
    bpsValue: string;
    bpsComputedTooltipType: string;
    bpsComputedTooltipPlacement: string;
    bpsComputedTooltipTitle: string | null;
    bpsEditTooltipType: string;
    bpsEditTooltipPlacement: string;
    bpsEditTooltipTitle: string | null;
    bpsValueChange: EventEmitter<any>;
    bpsShape: NzButtonShape;
    bpsSize: NzSizeLDSType;
    inputElement: ElementRef;
    readonly el: HTMLElement;
    isInDropdown: boolean;
    private iconElement;
    private iconOnly;
    private destroy$;
    /** temp solution since no method add classMap to host https://github.com/angular/angular/issues/7289 */
    setClassMap(): void;
    updateIconDisplay(value: boolean): void;
    checkContent(): void;
    moveIcon(): void;
    preventDefault($event: any): void;
    handleClick(e: MouseEvent): void;
    endEditMode($event: KeyboardEvent): void;
    clicks: number;
    onClick(event: MouseEvent): void;
    startEditionMode($event: Event): void;
    constructor(elementRef: ElementRef, cdr: ChangeDetectorRef, renderer: Renderer2, contentObserver: ContentObserver, nzUpdateHostClassService: NzUpdateHostClassService, ngZone: NgZone, nzConfigService: NzConfigService, waveConfig: NzWaveConfig, animationType: string);
    ngAfterContentInit(): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BpsButtonComponent, [null, null, null, null, null, null, null, { optional: true; }, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<BpsButtonComponent, "[bps-button]", ["bpsButton"], { "isSelected": { "alias": "isSelected"; "required": false; }; "bpsBlock": { "alias": "bpsBlock"; "required": false; }; "bpsGhost": { "alias": "bpsGhost"; "required": false; }; "bpsSearch": { "alias": "bpsSearch"; "required": false; }; "bpsComputed": { "alias": "bpsComputed"; "required": false; }; "bpsLoading": { "alias": "bpsLoading"; "required": false; }; "bpsEditionEnabled": { "alias": "bpsEditionEnabled"; "required": false; }; "bpsType": { "alias": "bpsType"; "required": false; }; "bpsValue": { "alias": "bpsValue"; "required": false; }; "bpsComputedTooltipType": { "alias": "bpsComputedTooltipType"; "required": false; }; "bpsComputedTooltipPlacement": { "alias": "bpsComputedTooltipPlacement"; "required": false; }; "bpsComputedTooltipTitle": { "alias": "bpsComputedTooltipTitle"; "required": false; }; "bpsEditTooltipType": { "alias": "bpsEditTooltipType"; "required": false; }; "bpsEditTooltipPlacement": { "alias": "bpsEditTooltipPlacement"; "required": false; }; "bpsEditTooltipTitle": { "alias": "bpsEditTooltipTitle"; "required": false; }; "bpsShape": { "alias": "bpsShape"; "required": false; }; "bpsSize": { "alias": "bpsSize"; "required": false; }; }, { "isSelectedChange": "isSelectedChange"; "bpsValueChange": "bpsValueChange"; }, ["listOfIconElement"], ["*"], false, never>;
}
