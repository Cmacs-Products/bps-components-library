import { ChangeDetectorRef, EventEmitter, OnDestroy, OnInit, AfterViewInit, TemplateRef, TrackByFunction, OnChanges, SimpleChanges, ElementRef } from '@angular/core';
import { NzI18nService } from 'ng-zorro-antd/i18n';
import { TableConfig, Field } from '../core/interfaces/grid-config';
import { CheckboxSelect } from '../bps-table/bps-table.component';
import { NzTableComponent } from 'ng-zorro-antd/table';
import * as i0 from "@angular/core";
export declare class BpsTableExpandablePanelComponent<T = any> implements OnInit, OnDestroy, AfterViewInit, OnChanges {
    private cdr;
    private i18n;
    locale: any;
    private destroy$;
    checkboxCache: CheckboxSelect[];
    mapOfExpandData: {
        [key: string]: boolean;
    };
    _data: any[];
    editId: any;
    isExpanded: boolean;
    searchBoxHovered: boolean;
    private _searchSubject;
    set data(data: any);
    frontPagination: boolean;
    total: number;
    pageIndex: number;
    pageSize: number;
    showPagination: boolean;
    paginationPosition: 'top' | 'bottom' | 'both';
    bordered: boolean;
    widthConfig: string[];
    loading: boolean;
    loadingDelay: number;
    loadingIndicator: TemplateRef<void>;
    scroll: {
        x?: string | null;
        y?: string | null;
    };
    title: string | TemplateRef<void>;
    footer: string | TemplateRef<void>;
    noResult: string | TemplateRef<void>;
    pageSizeOptions: number[];
    showQuickJumper: boolean;
    showSizeChanger: boolean;
    showTotal: TemplateRef<{
        $implicit: number;
        range: [number, number];
    }>;
    hideOnSinglePage: boolean;
    simple: boolean;
    virtualScroll: boolean;
    virtualItemSize: number;
    virtualMaxBufferPx: number;
    virtualMinBufferPx: number;
    virtualForTrackBy: TrackByFunction<T>;
    inlineEdit: boolean;
    pageIndexChange: EventEmitter<any>;
    currentPageDataChange: EventEmitter<any>;
    queryParamsChange: EventEmitter<any>;
    pageSizeChange: EventEmitter<any>;
    onclickRow: EventEmitter<any>;
    ondblclickRow: EventEmitter<any>;
    selectionChange: EventEmitter<any>;
    singleSort: boolean;
    sortChange: EventEmitter<any>;
    config: TableConfig;
    configChange: EventEmitter<TableConfig>;
    gridID: string;
    onedit: EventEmitter<any>;
    menuTemplate: TemplateRef<void>;
    currentPreviewTemplate: TemplateRef<void>;
    inputElement: ElementRef;
    gridComponent: NzTableComponent<any>;
    panel: ElementRef;
    handleClick(e: MouseEvent): void;
    emitOnEditEvent(): void;
    endEditMode($event: KeyboardEvent, index: number, data?: any): void;
    preventDefault($event: MouseEvent): void;
    emitBpsEvent($event: any, type: string): void;
    getFields(): Field[];
    constructor(cdr: ChangeDetectorRef, i18n: NzI18nService);
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    isCeldTypeTemplateRef(field: Field): boolean;
    isCeldTypeDefault(field: Field): boolean;
    getTDClassMap(field: Field, data: any, fi?: number): any;
    isRowSelected(data: any): boolean;
    updateCheckboxCache(): void;
    clicks: number;
    clickRow(event: MouseEvent, data: any): void;
    startEdit(data: any, event: MouseEvent): void;
    isNull(value: any): boolean;
    selectText($event: any): void;
    selectRow(data: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BpsTableExpandablePanelComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<BpsTableExpandablePanelComponent<any>, "bps-table-expandable-panel", ["bpsTableExpandablePanel"], { "data": { "alias": "data"; "required": false; }; "frontPagination": { "alias": "frontPagination"; "required": false; }; "total": { "alias": "total"; "required": false; }; "pageIndex": { "alias": "pageIndex"; "required": false; }; "pageSize": { "alias": "pageSize"; "required": false; }; "showPagination": { "alias": "showPagination"; "required": false; }; "paginationPosition": { "alias": "paginationPosition"; "required": false; }; "bordered": { "alias": "bordered"; "required": false; }; "widthConfig": { "alias": "widthConfig"; "required": false; }; "loading": { "alias": "loading"; "required": false; }; "loadingDelay": { "alias": "loadingDelay"; "required": false; }; "loadingIndicator": { "alias": "loadingIndicator"; "required": false; }; "scroll": { "alias": "scroll"; "required": false; }; "title": { "alias": "title"; "required": false; }; "footer": { "alias": "footer"; "required": false; }; "noResult": { "alias": "noResult"; "required": false; }; "pageSizeOptions": { "alias": "pageSizeOptions"; "required": false; }; "showQuickJumper": { "alias": "showQuickJumper"; "required": false; }; "showSizeChanger": { "alias": "showSizeChanger"; "required": false; }; "showTotal": { "alias": "showTotal"; "required": false; }; "hideOnSinglePage": { "alias": "hideOnSinglePage"; "required": false; }; "simple": { "alias": "simple"; "required": false; }; "virtualScroll": { "alias": "virtualScroll"; "required": false; }; "virtualItemSize": { "alias": "virtualItemSize"; "required": false; }; "virtualMaxBufferPx": { "alias": "virtualMaxBufferPx"; "required": false; }; "virtualMinBufferPx": { "alias": "virtualMinBufferPx"; "required": false; }; "virtualForTrackBy": { "alias": "virtualForTrackBy"; "required": false; }; "inlineEdit": { "alias": "inlineEdit"; "required": false; }; "singleSort": { "alias": "singleSort"; "required": false; }; "config": { "alias": "config"; "required": false; }; "gridID": { "alias": "gridID"; "required": false; }; "menuTemplate": { "alias": "menuTemplate"; "required": false; }; "currentPreviewTemplate": { "alias": "currentPreviewTemplate"; "required": false; }; }, { "pageIndexChange": "pageIndexChange"; "currentPageDataChange": "currentPageDataChange"; "queryParamsChange": "queryParamsChange"; "pageSizeChange": "pageSizeChange"; "onclickRow": "onclickRow"; "ondblclickRow": "ondblclickRow"; "selectionChange": "selectionChange"; "sortChange": "sortChange"; "configChange": "configChange"; "onedit": "onedit"; }, never, never, false, never>;
}
