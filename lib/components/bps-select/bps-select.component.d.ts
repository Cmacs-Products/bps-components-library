import { CdkConnectedOverlay, CdkOverlayOrigin, ConnectedOverlayPositionChange } from '@angular/cdk/overlay';
import { Platform } from '@angular/cdk/platform';
import { AfterContentInit, AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit, QueryList, Renderer2, TemplateRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { NzNoAnimationDirective, NzSizeLDSType } from 'ng-zorro-antd/core';
import { BpsOptionGroupComponent } from './bps-option-group.component';
import { BpsOptionComponent } from './bps-option.component';
import { TFilterOption } from './bps-option.pipe';
import { BpsSelectTopControlComponent } from './bps-select-top-control.component';
import { BpsSelectService } from './bps-select.service';
export declare class BpsSelectComponent implements ControlValueAccessor, OnInit, AfterViewInit, OnDestroy, AfterContentInit {
    nzSelectService: BpsSelectService;
    private cdr;
    private platform;
    noAnimation?: NzNoAnimationDirective;
    open: boolean;
    value: any | any[];
    onChange: (value: string | string[]) => void;
    onTouched: () => void;
    dropDownPosition: 'top' | 'center' | 'bottom';
    triggerWidth: number;
    private _disabled;
    private isInit;
    private destroy$;
    cdkOverlayOrigin: CdkOverlayOrigin;
    cdkConnectedOverlay: CdkConnectedOverlay;
    bpsSelectTopControlComponent: BpsSelectTopControlComponent;
    bpsSelectTopControlElement: ElementRef;
    /** should move to nz-option-container when https://github.com/angular/angular/issues/20810 resolved **/
    listOfNzOptionComponent: QueryList<BpsOptionComponent>;
    listOfNzOptionGroupComponent: QueryList<BpsOptionGroupComponent>;
    readonly bpsOnSearch: EventEmitter<string>;
    readonly bpsScrollToBottom: EventEmitter<void>;
    readonly bpsOpenChange: EventEmitter<boolean>;
    readonly bpsBlur: EventEmitter<void>;
    readonly bpsFocus: EventEmitter<void>;
    bpsSize: NzSizeLDSType;
    bpsDropdownClassName: string;
    bpsDropdownMatchSelectWidth: boolean;
    bpsDropdownStyle: {
        [key: string]: string;
    };
    bpsNotFoundContent: string;
    bpsAllowClear: boolean;
    bpsShowSearch: boolean;
    bpsLoading: boolean;
    bpsAutoFocus: boolean;
    bpsPlaceHolder: string;
    bpsMaxTagCount: number;
    bpsDropdownRender: TemplateRef<void>;
    bpsCustomTemplate: TemplateRef<{
        $implicit: BpsOptionComponent;
    }>;
    bpsSuffixIcon: TemplateRef<void>;
    bpsClearIcon: TemplateRef<void>;
    bpsRemoveIcon: TemplateRef<void>;
    bpsMenuItemSelectedIcon: TemplateRef<void>;
    bpsShowArrow: boolean;
    bpsTokenSeparators: string[];
    bpsMaxTagPlaceholder: TemplateRef<{
        $implicit: any[];
    }>;
    set bpsAutoClearSearchValue(value: boolean);
    set bpsMaxMultipleCount(value: number);
    set bpsServerSearch(value: boolean);
    set bpsMode(value: 'default' | 'multiple' | 'tags');
    set bpsFilterOption(value: TFilterOption);
    set compareWith(value: (o1: any, o2: any) => boolean);
    set bpsOpen(value: boolean);
    set bpsDisabled(value: boolean);
    get bpsDisabled(): boolean;
    get bpsSelectTopControlDOM(): HTMLElement;
    updateAutoFocus(): void;
    focus(): void;
    blur(): void;
    onFocus(): void;
    onBlur(): void;
    onKeyDown(event: KeyboardEvent): void;
    toggleDropDown(): void;
    closeDropDown(): void;
    onPositionChange(position: ConnectedOverlayPositionChange): void;
    updateCdkConnectedOverlayStatus(): void;
    updateCdkConnectedOverlayPositions(): void;
    constructor(renderer: Renderer2, nzSelectService: BpsSelectService, cdr: ChangeDetectorRef, platform: Platform, elementRef: ElementRef, noAnimation?: NzNoAnimationDirective);
    /** update ngModel -> update listOfSelectedValue **/
    writeValue(value: any | any[]): void;
    registerOnChange(fn: (value: string | string[]) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
}
